import { BundlerOptions, Bundler } from '@vuepress/core';
import { VueLoaderOptions } from 'vue-loader';
export { VueLoaderOptions } from 'vue-loader';
import { Configuration, LoaderContext } from 'webpack';
export { Configuration as WebpackConfiguration } from 'webpack';
import WebpackChainConfig from 'webpack-5-chain';
export { default as WebpackChainConfig } from 'webpack-5-chain';
import WebpackDevServer from 'webpack-dev-server';
export { default as WebpackDevServer } from 'webpack-dev-server';

/**
 * Options for bundler-webpack
 */
interface WebpackBundlerOptions extends BundlerOptions {
    /**
     * use webpack-merge to set webpack config
     */
    configureWebpack?: (config: Configuration, isServer: boolean, isBuild: boolean) => Configuration | void;
    /**
     * use webpack-5-chain to set webpack config
     */
    chainWebpack?: (config: WebpackChainConfig, isServer: boolean, isBuild: boolean) => void;
    /**
     * `setupMiddlewares` config of webpack-dev-server
     */
    devServerSetupMiddlewares?: WebpackDevServer.Configuration['setupMiddlewares'];
    /**
     * vue-loader options
     */
    vue?: VueLoaderOptions;
    /**
     * postcss-loader options
     */
    postcss?: PostcssLoaderOptions;
    /**
     * stylus-loader options
     */
    stylus?: StylusLoaderOptions;
    /**
     * sass-loader options for scss files
     */
    scss?: SassLoaderOptions;
    /**
     * sass-loader options for sass files
     */
    sass?: SassLoaderOptions;
    /**
     * less-loader options
     */
    less?: LessLoaderOptions;
    /**
     * only target evergreen browsers or not
     */
    evergreen?: boolean;
}
/**
 * Common options for style preprocessor webpack loaders
 */
interface StylePreprocessorLoaderOptions {
    additionalData?: string | ((content: string, loaderContext: LoaderContext<Record<string, unknown>>) => string);
    sourceMap?: boolean;
    webpackImporter?: boolean;
}
/**
 * Common type for style pre-processor options
 */
type StylePreprocessorOptions<T extends Record<string, unknown> = Record<string, unknown>> = T | ((loaderContext: LoaderContext<T>) => TextDecodeOptions);
/**
 * Options for postcss-loader
 *
 * @see https://github.com/webpack-contrib/postcss-loader#options
 */
interface PostcssLoaderOptions extends Pick<StylePreprocessorLoaderOptions, 'sourceMap'> {
    execute?: boolean;
    implementation?: string | ((...args: unknown[]) => unknown);
    postcssOptions?: StylePreprocessorOptions;
}
/**
 * Options for stylus-loader
 *
 * @see https://github.com/webpack-contrib/stylus-loader#options
 */
interface StylusLoaderOptions extends StylePreprocessorLoaderOptions {
    implementation?: string | ((...args: unknown[]) => unknown);
    stylusOptions?: StylePreprocessorOptions;
}
/**
 * Options for sass-loader
 *
 * @see https://github.com/webpack-contrib/sass-loader#options
 */
interface SassLoaderOptions extends StylePreprocessorLoaderOptions {
    api?: 'legacy' | 'modern-compiler' | 'modern';
    implementation?: Record<string, unknown> | string;
    sassOptions?: StylePreprocessorOptions;
    warnRuleAsWarning?: boolean;
}
/**
 * Options for less-loader
 *
 * @see https://github.com/webpack-contrib/less-loader#options
 */
interface LessLoaderOptions extends StylePreprocessorLoaderOptions {
    implementation?: Record<string, unknown> | string;
    lessLogAsWarnOrErr?: boolean;
    lessOptions?: StylePreprocessorOptions;
}

declare const webpackBundler: (options?: WebpackBundlerOptions) => Bundler;

export { type LessLoaderOptions, type PostcssLoaderOptions, type SassLoaderOptions, type StylePreprocessorLoaderOptions, type StylePreprocessorOptions, type StylusLoaderOptions, type WebpackBundlerOptions, webpackBundler as default, webpackBundler };
