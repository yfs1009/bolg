"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[68],{6262:(e,n)=>{n.A=(e,n)=>{const r=e.__vccOpts||e;for(const[e,t]of n)r[e]=t;return r}},4331:(e,n,r)=>{r.r(n),r.d(n,{comp:()=>a,data:()=>o});var t=r(641);const s={},a=(0,r(6262).A)(s,[["render",function(e,n){return(0,t.uX)(),(0,t.CE)("div",null,n[0]||(n[0]=[(0,t.Lk)("h1",{id:"axios",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#axios"},[(0,t.Lk)("span",null,"axios")])],-1),(0,t.Lk)("h2",{id:"axios的封装",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#axios的封装"},[(0,t.Lk)("span",null,"axios的封装")])],-1),(0,t.Lk)("div",null,[(0,t.eW)("在Vue应用程序中，Axios是一个流行的库，用于执行HTTP请求。它基于Promise，可以在浏览器和Node.js中使用。Vue开发者通常会选择Axios来处理API请求，因为它易于使用且功能强大。"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.eW)("代码示例：")],-1),(0,t.Lk)("pre",null,"import axios from 'axios'\nimport { Message } from 'element-ui'\nimport {Loading  } from 'element-ui'\n \naxios.defaults.withCredentials = true;\nlet loading;\nlet loadingNum=0;\n\nfunction startLoading() {    \n    if(loadingNum==0){\n        loading = Loading.service({\n          lock: true,\n          text: '加载中...',\n          background:'rgba(255,255,255,0.5)',\n        })\n    }\n    //请求数量加1\n    loadingNum++;\n}\nfunction endLoading() {\n    //请求数量减1\n    loadingNum--\n    if(loadingNum<=0){\n        loading.close()\n    }\n}\n\n// 域名地址\naxios.defaults.baseURL = 'http://192.168.9.26:8080';\n \n \n//  REQUEST 请求异常拦截\naxios.interceptors.request.use(config => {\n    startLoading();\n    const token = localStorage.getItem('token');\n    // 将Token添加到请求头里面\n    token && (config.headers['X-Access-Token'] = token);\n    return config;\n}, err => {\n    // 错误处理\n    Message.error({ message: '请求超时!' });\n    return Promise.resolve(err);\n});\n \n//  RESPONSE 响应异常拦截\naxios.interceptors.response.use(result => {\n/*     if(result.data.message==\"Token失效,请重新登录\"||res.data.message === 'token非法无效'){\n\n    } */\n        endLoading();\n        return result\n\n\n/*     if (result.data.code && result.data.code != 200) {\n        Message.error({ message: result.data.msg });\n        // 非法进入时直接跳到登录页\n        window.location.href = '/';\n        return;\n    };\n    return result; */\n}, err => {\n \n    if (err && err.response) {\n        switch (err.response.status) {\n            case 401:\n                err.message = '请求方式错误!';\n                break;\n            case 402:\n                err.message = '请求参数错误!';\n                break;\n            default:\n                err.message = `登录凭证过期,请重新登录!`;\n        }\n    } else {\n        err.message = '连接服务器失败!'\n    }\n \n    Message.error({ message: err.message })\n    return Promise.resolve(err);\n})\n \n// 接口域名\nexport const url = axios.defaults.baseURL;\n \n// POST 方法封装 (处理参数与文件上传)\nexport const postRequest = (url, params) => {\n    return axios({\n        method: 'post',\n        url: url,\n        data: params\n    });\n}\n \n \n//  GET 方法封装\nexport const getRequest = (url, params) => {\n    return axios({\n        method: 'get',\n        url: url,\n        params: params\n    });\n}\n \n//  PUT 方法封装\nexport const putRequest = (url, params) => {\n    return axios({\n        method: 'put',\n        url: url,\n        data: params\n    });\n}\n \n//  DELETE 方法封装\nexport const deleteRequest = (url, params) => {\n    return axios({\n        method: 'delete',\n        url: url,\n        data: params\n    });\n}\n",-1)]))}]]),o=JSON.parse('{"path":"/posts/axios.html","title":"axios","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-26T00:00:00.000Z","category":["vue2"],"description":"axios axios的封装 在Vue应用程序中，Axios是一个流行的库，用于执行HTTP请求。它基于Promise，可以在浏览器和Node.js中使用。Vue开发者通常会选择Axios来处理API请求，因为它易于使用且功能强大。代码示例：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/bolg/posts/axios.html"}],["meta",{"property":"og:site_name","content":"YFS"}],["meta",{"property":"og:title","content":"axios"}],["meta",{"property":"og:description","content":"axios axios的封装 在Vue应用程序中，Axios是一个流行的库，用于执行HTTP请求。它基于Promise，可以在浏览器和Node.js中使用。Vue开发者通常会选择Axios来处理API请求，因为它易于使用且功能强大。代码示例："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-26T09:27:46.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T09:27:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"axios\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-26T09:27:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.YFS\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"axios的封装","slug":"axios的封装","link":"#axios的封装","children":[]}],"git":{"createdTime":1732613266000,"updatedTime":1732613266000,"contributors":[{"name":"youfusheng","email":"you9026131008@163.com","commits":1}]},"readingTime":{"minutes":1.4,"words":421},"filePathRelative":"posts/axios.md","localizedDate":"2024年11月26日","excerpt":"\\n<h2>axios的封装</h2>\\n<div>在Vue应用程序中，Axios是一个流行的库，用于执行HTTP请求。它基于Promise，可以在浏览器和Node.js中使用。Vue开发者通常会选择Axios来处理API请求，因为它易于使用且功能强大。<br><br>代码示例：</div>\\n<pre>import axios from \'axios\'\\nimport { Message } from \'element-ui\'\\nimport {Loading  } from \'element-ui\'\\n \\naxios.defaults.withCredentials = true;\\nlet loading;\\nlet loadingNum=0;\\n\\nfunction startLoading() {    \\n    if(loadingNum==0){\\n        loading = Loading.service({\\n          lock: true,\\n          text: \'加载中...\',\\n          background:\'rgba(255,255,255,0.5)\',\\n        })\\n    }\\n    //请求数量加1\\n    loadingNum++;\\n}\\nfunction endLoading() {\\n    //请求数量减1\\n    loadingNum--\\n    if(loadingNum&lt;=0){\\n        loading.close()\\n    }\\n}\\n\\n// 域名地址\\naxios.defaults.baseURL = \'http://192.168.9.26:8080\';\\n \\n \\n//  REQUEST 请求异常拦截\\naxios.interceptors.request.use(config =&gt; {\\n    startLoading();\\n    const token = localStorage.getItem(\'token\');\\n    // 将Token添加到请求头里面\\n    token &amp;&amp; (config.headers[\'X-Access-Token\'] = token);\\n    return config;\\n}, err =&gt; {\\n    // 错误处理\\n    Message.error({ message: \'请求超时!\' });\\n    return Promise.resolve(err);\\n});\\n \\n//  RESPONSE 响应异常拦截\\naxios.interceptors.response.use(result =&gt; {\\n/*     if(result.data.message==\\"Token失效,请重新登录\\"||res.data.message === \'token非法无效\'){\\n\\n    } */\\n        endLoading();\\n        return result\\n\\n\\n/*     if (result.data.code &amp;&amp; result.data.code != 200) {\\n        Message.error({ message: result.data.msg });\\n        // 非法进入时直接跳到登录页\\n        window.location.href = \'/\';\\n        return;\\n    };\\n    return result; */\\n}, err =&gt; {\\n \\n    if (err &amp;&amp; err.response) {\\n        switch (err.response.status) {\\n            case 401:\\n                err.message = \'请求方式错误!\';\\n                break;\\n            case 402:\\n                err.message = \'请求参数错误!\';\\n                break;\\n            default:\\n                err.message = `登录凭证过期,请重新登录!`;\\n        }\\n    } else {\\n        err.message = \'连接服务器失败!\'\\n    }\\n \\n    Message.error({ message: err.message })\\n    return Promise.resolve(err);\\n})\\n \\n// 接口域名\\nexport const url = axios.defaults.baseURL;\\n \\n// POST 方法封装 (处理参数与文件上传)\\nexport const postRequest = (url, params) =&gt; {\\n    return axios({\\n        method: \'post\',\\n        url: url,\\n        data: params\\n    });\\n}\\n \\n \\n//  GET 方法封装\\nexport const getRequest = (url, params) =&gt; {\\n    return axios({\\n        method: \'get\',\\n        url: url,\\n        params: params\\n    });\\n}\\n \\n//  PUT 方法封装\\nexport const putRequest = (url, params) =&gt; {\\n    return axios({\\n        method: \'put\',\\n        url: url,\\n        data: params\\n    });\\n}\\n \\n//  DELETE 方法封装\\nexport const deleteRequest = (url, params) =&gt; {\\n    return axios({\\n        method: \'delete\',\\n        url: url,\\n        data: params\\n    });\\n}\\n</pre>","autoDesc":true}')}}]);